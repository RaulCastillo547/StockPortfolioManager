### Additional Notes About Program:
#### Tables used in portfolios
   - Meta: Contains information about the portfolio's cash balance and daily/minute call amounts
      - time (TEXT): Tracks the current minute and day in an ISO format date time string
      - cash (REAL): Tracks the amount of cash in the portfolio
      - minute_calls (INTEGER): Tracks the amount of minute calls made at the current minute
      - daily_calls (INTEGER): Tracks the amount of daily calls made at the current date
   
   - Orders: Contains listings for orders on hold
      - time (TEXT): Tracks the time an order was made
      - stock_ticker (TEXT): Names the stock being ordered
      - quantity (INTEGER): Lists the amount of shares being bought (if positive) or sold (if negative)

   - Receipts: Contains listings for completed orders
      - time_posted (TEXT): Tracks the time an order was completed
      - stock_ticker (TEXT): Stores the name of the stock that was ordered
      - quantity (TEXT): Stores the amount of shares being bought (if positive) or sold (if negative)
      - price_per_share (REAL): Stores the price of a stock's share at time of purchase
      - total_amount (REAL): Stores the amount of money given (if positive) or received (if negative) from a purchase

   - Overview: Summarizes Receipts table, showing what investments the portfolio currently has
      - stock_ticker (TEXT): Stores the name of the stock
      - quantity (INTEGER): Stores the amount of shares for a stock in the portfolio
      - amount_invested (REAL): Tracks the amount of money invested in the stock
      - current_price (REAL): Tracks the stocks current price
      - current_value (REAL): The current value of an investment if it were to be liquidated into cash
      - profit (REAL): The amount of money one has made (if positive) or loss (if negative) from an investment
      - time_updated (TEXT): Tracks the time that the stock's current price has been updated

#### Tables used in portfolios
- PortfolioManager(database_name, API_KEY): Defines class representing a portfolio using the name `database_name` and the api key `API_KEY`
   - make_order(stock_ticker, quantity): Calls an order of shares; outputs a 0 or 1 if order does not or does leave the portfolio with less than 0 shares in a stock, respectively
      - `stock_ticker`: Name of stock
      - `quantity`: Number of shares to order
   - update(): Keeps portfolio up-to-date, completing any held orders and updating the Overview table with the portfolio's current makeup
   - graph_portfolio(): Outputs a matplotlib figure summarizing the portfolio's makeup and performance; returns 1 if Overview table is empty (making graphing unnecessary) and 0 if Overview table is not empty
   - add_remove_cash(amount): Changes the amount of cash in the portfolio; returns 0 or 1 if the change does not or does leads to a negative balance, respectively
      - `amount`: Amount of cash to add (if positive) or remove (if negative)
   - increment_minute_daily_calls(): Used to increase the minute and daily call counts on the Meta table by one
   - check_cash(): Returns the amount of cash in the portfolio
   - check_minute_calls(): Returns the amount of minute calls performed during the current minute
   - check_daily_calls(): Returns the amount of daily calls performed during the current day
   - overview_table(): Returns the Overview table as a Pandas dataframe
